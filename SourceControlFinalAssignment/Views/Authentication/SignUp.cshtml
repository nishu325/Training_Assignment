@model SourceControlFinalAssignment.Models.Employee

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <!--Bootstrap CSS-->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">

    <title>Login</title>
</head>
<body>



    <div class="row justify-content-center mx-4 mt-4">
        <div class="col-12 col-sm-6 col-md-3">
            @using (Html.BeginForm("SignUp", "Authentication", FormMethod.Post))
            {
                <!--protect your application against cross-site request forgery.-->
                @Html.AntiForgeryToken()
                <div>
                    <p><b>New Employee Registration</b></p>
                    <hr style="border:groove" />
                </div>
                <!--Employee name input field-->
                <div class="form-group">
                    @Html.LabelFor(m => m.Name, "Name")
                    @Html.TextBoxFor(m => m.Name, "", new { @class = "form-control", @placeholder = "Name" })
                    @Html.ValidationMessage("Name", "", new { @class = "badge badge-danger" })
                </div>
                <!--Employee email-id input field-->
                <div class="form-group">
                    @Html.LabelFor(m => m.Email, "Email-Id")
                    @Html.TextBoxFor(m => m.Email, "", new { @class = "form-control", @placeholder = "Email" })
                    @Html.ValidationMessage("Email", "", new { @class = "badge badge-danger" })
                </div>
                <!--Employee password input field-->
                <div class="form-group">
                    @Html.LabelFor(m => m.Password, "Password")
                    @Html.PasswordFor(m => m.Password, new { @class = "form-control", @placeholder = "Password" })
                    @Html.ValidationMessage("Password", "", new { @class = "badge badge-danger" })
                </div>
                <!--Employee phone number input field-->
                <div class="form-group">
                    @Html.LabelFor(m => m.Phone, "Phone")
                    @Html.TextBoxFor(m => m.Phone, "", new { @class = "form-control", @placeholder = "Phone" })
                    @Html.ValidationMessageFor(m => m.Phone, "", new { @class = "badge badge-danger" })
                </div>
                <!--Take employee image-->
                <div class="form-group">
                    @Html.LabelFor(m => m.ImagePath, "Image")
                    @Html.TextBoxFor(m => m.ImagePath, "", new { @Type = "file", @placeholder = "ImagePath" })
                    @Html.ValidationMessageFor(m => m.ImagePath, "", new { @class = "badge badge-danger" })
                </div>
                <!--Employee Age input field-->
                <div class="form-group">
                    @Html.LabelFor(m => m.Age, "Age")
                    @Html.TextBoxFor(m => m.Age, "", new { @class = "form-control", @placeholder = "Age" })
                    @Html.ValidationMessageFor(m => m.Age, "", new { @class = "badge badge-danger" })
                </div>
                <!--Employee experience input field-->
                <div class="form-group">
                    @Html.LabelFor(m => m.Experience, "Experience")
                    @Html.TextBoxFor(m => m.Experience, "", new { @class = "form-control", @placeholder = "Experience" })
                    @Html.ValidationMessageFor(m => m.Experience, "", new { @class = "badge badge-danger" })
                </div>


                <!--Register button-->
                <button type="submit" class="btn btn-block btn-primary">Register</button>
            }

        </div>

    </div>
</body>
</html>
